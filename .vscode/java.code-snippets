{
  "spring": {
    "prefix": "j-service",
    "body": [
      "package com.techatpark.gurukulam.eppo.service;",
      "import javax.sql.DataSource;",
      "import com.techatpark.gurukulam.eppo.model.${1};",
      "import org.springframework.jdbc.core.JdbcTemplate;",
      "import org.springframework.jdbc.core.simple.SimpleJdbcInsert;",
      "import org.springframework.stereotype.Service;",
      "@Service",
      "public class ${1}Service {",
      "/**",
      "* this is used to execute a connection with a database.",
      "*/",
      "private final JdbcTemplate jdbcTemplate;",
      "/**",
      "* this is used to connect to relational database.",
      "*/",
      "private final DataSource dataSource;",
      "/** ",
      "* Creates a service for ${1} related operations.",
      "* @param jdbcTemplate",
      "* @param dataSource",
      "*/",
      "public ${1}Service(final JdbcTemplate jdbcTemplate, final DataSource dataSource) {",
      "this.dataSource = dataSource;",
      "this.jdbcTemplate = jdbcTemplate;",
      "}",
      "/**",
      "* inserting into ${1} table.",
      "* ",
      "* @param new${1}",
      "* @return reads the input data",
      "*/",
      "public ${1} create(final ${1} new${1}) {",
      "final SimpleJdbcInsert insert = new SimpleJdbcInsert(dataSource).withTableName(\"${2}\")",
      ".usingGeneratedKeyColumns(\"id\").usingColumns(${3});",
      "final Map<String, Object> valuesMap = new HashMap<>();",
      "valuesMap.put(${4});",
      "// Actual Query Execution happens",
      "final Number id = insert.executeAndReturnKey(valuesMap);",
      "return read(id.intValue()).get();",
      "}",
      "/**",
      "* reads from table ${1}.",
      "*",
      "* @param id",
      "* @return ${1}",
      "*/",
      "public Optional<${1}> read(final Integer id) {",
      "final String query = \"SELECT ${5} FROM ${2} WHERE id = ?\";",
      "try {",
      "return Optional.of(jdbcTemplate.queryForObject(query, new Object[] { id }, this::mapRow));",
      "} catch (EmptyResultDataAccessException e) {",
      "return Optional.empty();",
      "}",
      "}",
      "/**",
      "* update table ${1}.",
      "*",
      "* @param id",
      "* @param ${1}ToBeUpdated",
      "* @return ${1}",
      "*/",
      "public ${1} update(final Integer id, final ${1} ${1}ToBeUpdated) {",
      "final String query = \"UPDATE ${2} SET ${6}, created_at = CURRENT_TIMESTAMP, updated_at = CURRENT_TIMESTAMP WHERE id = ?\";",
      "jdbcTemplate.update(query, ${1}ToBeUpdated.getCode(), id);",
      "return read(id).get();",
      "}",
      "/**",
      "* Delete all from ${1}.",
      "*", 
      "* @return ${1}",
      "*/",
      "public Integer delete() {",
      "final String query = \"DELETE FROM ${2}\";",
      "return jdbcTemplate.update(query);",
      "}",
      "/**",
      "* Delete all from ${1}.",
      "*", 
      "* @return ${1}",
      "*/",
      "public Integer delete() {",
      "final String query = \"DELETE FROM ${1}\";",
      "return jdbcTemplate.update(query);",
      "}",
      "/**",
      "* gets a list of all in ${1}.",
      "*", 
      "* @return ${1}",
      "*/",
      "public List<${1}> list() {",
      "final String query = \"SELECT ${5} FROM ${2}\";",
      "return jdbcTemplate.query(query, this::mapRow);",
      "}",
      "/**",
      "* Maps the data from and to the database.",
      "*", 
      "* @param rs",
      "* @param rowNum",
      "* @return ${1}",
      "* @throws SQLException",
      "*/", 
      "private ${1} mapRow(final ResultSet rs, final int rowNum) throws SQLException {",
      "final Namespace namespace = new Namespace();",
      "${1}.setId(rs.getInt(\"id\"));",
      "${7}",
      "${1}.setUpdatedAt(rs.getDate(\"updated_at\"));",
      "${1}.setUpdatedAt(rs.getDate(\"updated_at\"));",
      "return namespace;",
      "}",
      "}",
    " "
  ],
  "description": "Create a Service Class"
}
}